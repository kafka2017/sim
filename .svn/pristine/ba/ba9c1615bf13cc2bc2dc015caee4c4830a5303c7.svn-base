package com.amwell.service.impl.simcompany;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.shiro.util.StringUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.amwell.common.CardStateConstants;
import com.amwell.config.AmwellSetConfig;
import com.amwell.mapper.UserMapper;
import com.amwell.mapper.report.SimCompanyReportMapper;
import com.amwell.mapper.simbaseInfo.SimBaseInfoMapper;
import com.amwell.mapper.simcompany.SimCompanyMapper;
import com.amwell.mapper.simwaringset.SimWaringSetMapper;
import com.amwell.model.User;
import com.amwell.model.simbaseInfo.SimBaseInfo;
import com.amwell.model.simbaseInfo.SimBaseInfoQuery;
import com.amwell.model.simcompany.SimCompany;
import com.amwell.model.simcompany.SimCompanyQuery;
import com.amwell.model.simcompany.SimCompanyReport;
import com.amwell.model.simcompany.SimCompanyStatTreeNode;
import com.amwell.model.simcompany.SimCompanyTreeNode;
import com.amwell.model.simwaringset.SimWaringSet;
import com.amwell.service.impl.BaseService;
import com.amwell.service.simcompany.SimCompanyService;
import com.amwell.util.JSONUtil;
import com.amwell.util.PasswordHelper;
import com.amwell.util.ResultJson;
import com.amwell.util.StatusCode;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import net.sf.oval.ConstraintViolation;
import net.sf.oval.Validator;
import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

@Service(value="simcompanyService")
public class SimCompanyServiceImpl extends BaseService<SimCompany> implements SimCompanyService {

	@Resource
	SimCompanyMapper simCompanyMapper;
	
	@Resource
	UserMapper userMapper;
	
	@Resource
	SimWaringSetMapper simwaringsetmapper;
	
	@Resource
	SimCompanyReportMapper simcompanyReportMapper;
	
	@Resource
	SimBaseInfoMapper simbaseInfoMapper;
	
	@Autowired
	AmwellSetConfig aset;
	
	@Override
	public PageInfo<SimCompany> querySimCompanyByPage(SimCompanyQuery query) {
        PageHelper.startPage(query.getPageNum(), query.getPageSize());
        List<SimCompany> simbaseInfoList = simCompanyMapper.querySimCompany(query);
        return new PageInfo<>(simbaseInfoList);
	}

	@Override
	public Map<String,Object> querySimCompany(SimCompanyQuery query) throws JSONException {
		query.setPageNum(null);
		query.setPageSize(null);
		List<SimCompany> l = simCompanyMapper.querySimCompany(query);
		JSONArray tree = new JSONArray();
		//迭代所有的权限集合
		for(int i=0;i<l.size();i++){
			//取出这个对象
			SimCompany simcompany = l.get(i);
			JSONObject one = new JSONObject();
			one.put("id", simcompany.getId());//设置权限ID
			one.put("pId", simcompany.getParentId());//设置父权限ID
			one.put("name", simcompany.getShortName());//设置权限的名称
			one.put("open", "false");//设置菜单出事话是否展开
			tree.put(one);
		}
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("tree", JSONUtil.toJSONString(tree));
		//map.put("tree", l);
		return map;
	}

	@Override
	@Transactional
	public ResultJson<Integer> addSimCompany(SimCompany model) {
		
		if(model==null){
			return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_NULL, "SimCompany为空，添加分公司账户失败");
		}
		model.setCreateTime(new Date());
		model.setLastUpdateTime(new Date());
		model.setVersion(1L);
		//验证
		Validator validator = new Validator(); 
	    List<ConstraintViolation> ret = validator.validate(model);
		if(!ret.isEmpty()){
			return ResultJson.buildFailedMsg(0, ret.get(0).getMessage());
		}
		
		Integer ucount = userMapper.isExisten("username", model.getUsername(), null);
		if(ucount>0){
			return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_FULLNAME_NULL, "登录账户已存在");
		}
		
		Integer fcount = simCompanyMapper.isExisten("fullName", model.getFullName(), null);
		if(fcount>0){
			return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_FULLNAME_NULL, "公司全称已存在");
		}
		
		Integer scount = simCompanyMapper.isExisten("shortName", model.getShortName(), null);
		if(scount>0){
			return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_SHORTNAME_NULL, "公司简称已存在");
		}
		
		//添加公司信息和账户信息
		try {
			Integer i = super.save(model);
			
			User user = new User();
			user.setUsername(model.getUsername());
			user.setPassword(model.getPassword());
			user.setRealname(model.getRealname());
			user.setSimcompanyId(model.getId());
			user.setEnable(model.getFlag());
			//密码加密
			user.setPassword(PasswordHelper.getEncryptPassword(user.getUsername(),user.getPassword()));
			userMapper.insert(user);
			
			if(i>0){
				return ResultJson.buildSuccessMsg(null,StatusCode.SUCCESS, "添加成功");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException();
		}
		
		return ResultJson.buildFailedMsg(StatusCode.EXCEPTION, "添加失败");
		
	}

	@Override
	@Transactional
	public ResultJson<Integer> updSimCompany(SimCompany model) {
		if(model==null){
			return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_NULL, "SimBaseInfo为空，更新失败");
		}
		model.setLastUpdateTime(new Date());
		//model.setVersion(1L);
		
		if(model.getId()==null){
			return ResultJson.buildFailedMsg(StatusCode.EXCEPTION, "参数异常");
		}
		
		//验证
		Validator validator = new Validator(); 
	    List<ConstraintViolation> ret = validator.validate(model);
		if(!ret.isEmpty()){
			return ResultJson.buildFailedMsg(0, ret.get(0).getMessage());
		}
		
		Integer fcount = simCompanyMapper.isExisten("fullName", model.getFullName(), model.getId());
		
		if(fcount>0){
			return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_FULLNAME_NULL, "公司全称已存在");
		}
		
		Integer scount = simCompanyMapper.isExisten("shortName", model.getShortName(), model.getId());
		if(scount>0){
			return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_SHORTNAME_NULL, "公司简称已存在");
		}
		
		
		//更新
		try {
			
			List<SimCompany> sc = simCompanyMapper.queryById(model.getId());
			
			if(sc==null || sc.size()==0){
				return ResultJson.buildFailedMsg(StatusCode.SIMCOMPANY_NULL, "无法获取更新数据");
			}
			
			model.setVersion(sc.get(0).getVersion());//乐观锁版本控制
			
			//修改账户的状态,公司与账户1：1关系
			if(model.getFlag()!=null){
				Integer flag = userMapper.updateUserFlag(model.getFlag(), model.getId());
			}
			
			Integer i = simCompanyMapper.updSimCompanyLock(model);
			if(i>0){
				return ResultJson.buildSuccessMsg(null,StatusCode.SUCCESS, "更新成功");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException();
		}
		
		return ResultJson.buildFailedMsg(0, "更新失败");
	}

	@Override
	public SimCompany queryById(Integer id) {
		if(id==null){
			return new SimCompany();
		}
		List<SimCompany> l = simCompanyMapper.queryById(id);
		if(l!=null && l.size()>0 && l.get(0)!=null){
			return l.get(0);
		}
		return new SimCompany();
	}

	@Override
	public ResultJson<Integer> delSimCompany(Integer id) {
		if(id==null){
			return ResultJson.buildFailedMsg(0, "id不能为空");
		}
		try {
			//根据公司id查询卡
			SimBaseInfoQuery query = new SimBaseInfoQuery();
			query.setCompanyId(id);
			List<SimBaseInfo> simbaselist = simbaseInfoMapper.querySimBaseInfo(query);
			if(simbaselist!=null && simbaselist.size()>0){
				return ResultJson.buildFailedMsg(null, StatusCode.EXCEPTION, "公司已绑定卡，无法删除");
			}
			
			//删除公司
			Integer i = super.delete(id);
			//删除账户
			Example example = new Example(User.class);
			Criteria c = example.createCriteria();
			c.andEqualTo("simcompanyId",id);
			userMapper.deleteByExample(example);
			
			if(i>0){
				return ResultJson.buildSuccessMsg(null,StatusCode.SUCCESS, "删除成功");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException();
		}
		
		return ResultJson.buildFailedMsg(StatusCode.EXCEPTION, "删除失败");
	}

	@Override
	public List<SimCompanyReport> querySimCompanyReport(SimCompanyQuery query) {
		
		Double setval = aset.getFlow();
		query.setPageNum(null);
		query.setPageSize(null);
		//读取公司配置的流量阈值
		if(query!=null && query.getCompanyId()!=null){
			SimWaringSet record = new SimWaringSet();
			record.setCompanyId(query.getCompanyId());
			SimWaringSet sws = simwaringsetmapper.selectOne(record);
			if(sws!=null){
				setval = sws.getSetVal();
			}
		}
		
		query.setSetVal(setval);
		return simcompanyReportMapper.querySimpanyReport(query);
	}

	/**
	 * 递归生成公司树
	 * @param companyId
	 * @return
	 */
	@Override
	public SimCompanyTreeNode querySimCompanyTree(Integer companyId) {
		SimCompanyTreeNode node = this.simCompanyMapper.queryTreeRootNodeById(companyId);
		List<SimCompanyTreeNode> childrenNodes = this.simCompanyMapper.queryTreeChildNodesByParentId(companyId);
		for(SimCompanyTreeNode child : childrenNodes){
			SimCompanyTreeNode n = querySimCompanyTree(child.getId());//递归
			node.getChildren().add(n);
		}
		return node;
	}

	@Override
	public SimCompanyStatTreeNode querySimCompanyStatTree(Integer companyId,String type) {
		SimCompanyStatTreeNode node = this.simCompanyMapper.queryStatTreeRootNodeById(companyId);
		setNodeStatData(node,type);
		List<SimCompanyStatTreeNode> childrenNodes = this.simCompanyMapper.queryStatTreeChildNodesByParentId(companyId);
		for(SimCompanyStatTreeNode child : childrenNodes){
			setNodeStatData(child,type);
			SimCompanyStatTreeNode n = querySimCompanyStatTree(child.getId(),type);//递归
			node.getChildren().add(n);
		}
		return node;
	}

	private void setNodeStatData(SimCompanyStatTreeNode node,String type) {
		if(node!=null){
			SimCompanyStatTreeNode statData = this.simCompanyMapper.queryNodeStatData(node.getId(),aset.getFlow());
			if(statData!=null){
				node.setCountEnable(statData.getCountEnable());
				node.setCountCancel(statData.getCountCancel());
				node.setCountDisable(statData.getCountDisable());
				node.setCountEnable(statData.getCountEnable());
				node.setCountExceed(statData.getCountExceed());
				node.setCountSilence(statData.getCountSilence());
				node.setCountUnknown(statData.getCountUnknown());
				node.setCountWarn(statData.getCountWarn());
				node.setFullName(node.getFullName()+buildWithType(node,type));
				node.setShortName(node.getShortName()+buildWithType(node,type));
			}
			
		}
	}

	
	private String buildWithType(SimCompanyStatTreeNode node, String type) {
		StringBuffer result = new StringBuffer("(");
		String s="";
		if(StringUtils.hasText(type)){
			if(CardStateConstants.DISABLE.equals(type)){
				s="停:"+node.getCountDisable();
			}
			else if(CardStateConstants.ENABLE.equals(type)){
				s="启:"+node.getCountEnable();
			}
			else if(CardStateConstants.EXCEED.equals(type)){
				s="超:"+node.getCountExceed();
			}
			else if(CardStateConstants.SILENCE.equals(type)){
				s="默:"+node.getCountSilence();
			}
			else if(CardStateConstants.UNKNOWN.equals(type)){
				s="未:"+node.getCountUnknown();
			}else if(CardStateConstants.WARN.equals(type)){
				s="警:"+node.getCountWarn();
			}else if(CardStateConstants.CANCEL.equals(type)){
				s="销:"+node.getCountCancel();
			}
		}else{
			s="超:"+node.getCountExceed()+" 警:"+node.getCountWarn()+" 启:"+node.getCountEnable()+" 停:"+node.getCountDisable()+" 默:"+node.getCountSilence()+" 未:"+node.getCountUnknown()+" 销:"+node.getCountCancel();
		}
		result.append(s).append(")");
		return result.toString();
	}
}
