package com.amwell.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.util.StringUtils;

public class ExcelUtil<T> {

	private Workbook wb;
	
	private Sheet sheet;
	
	private Class<T> clz;
	
	private int startLine;
	
	// 返回结果集合
	private List<T> objs = new ArrayList<T>();
	
	// 模板类属性集合
	private List<ExcelHeader> ehs = new ArrayList<ExcelHeader>();
	
	private Map<Integer,CellStyle> styleMap = new HashMap<Integer,CellStyle>();
	
	/**
	 * 写
	 * @param string
	 * @param string2
	 * @param userList
	 * @param class1
	 * @param startLine
	 */
	public void exportObj2ExcelByTemplate(String template,
			List<T> objList, Class<T> clz,int startLine,OutputStream out) {
		
		this.clz = clz;
		this.startLine = startLine;
		
		// 读取模板指定行的样式
		readTemplateStyle(template, startLine);
		// 
		getTemplateClassFieldList();
		
		try {
			sheet = wb.getSheetAt(0);
			for(T t : objList)
			{
				Row row = sheet.createRow(startLine - 1 );
				int index = 0;
				for(ExcelHeader eh : ehs)
				{
					Cell cell = row.createCell(index);
					CellStyle cellStyle = styleMap.get(index);
					cell.setCellStyle(cellStyle);
					Field field = clz.getDeclaredField(eh.getFieldName());
					field.setAccessible(true);
					cell.setCellValue((String)field.get(t));
					index++;
				}
				startLine++;
			}
			wb.write(out);
		} catch (EncryptedDocumentException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
		
	}


	private void readTemplateStyle(String template, int startLine) {
		File file = new File(template);
		try {
			wb = WorkbookFactory.create(file);
			sheet = wb.getSheetAt(0);
			Row row = sheet.getRow(startLine-1);
			int firstCellNum = row.getFirstCellNum();
			int lastCellNum = row.getLastCellNum();
			
			for(int i = firstCellNum;i<lastCellNum;i++){
				Cell cell = row.getCell(i);
				CellStyle cellStyle = cell.getCellStyle();
				styleMap.put(i, cellStyle);
			}
			
		} catch (EncryptedDocumentException e) {
			e.printStackTrace();
		} catch (InvalidFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public List<T> readExcelTemplate2ObjByInputStream(InputStream inputStream,Class<T> clz,int startLine){
		try {
			wb = WorkbookFactory.create(inputStream);
			return readExcelTemplate2Obj(clz,startLine);
		} catch (EncryptedDocumentException e) {
			e.printStackTrace();
		} catch (InvalidFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 
	 * @param file
	 */
	public List<T> readExcelTemplate2ObjByFile(File file,Class<T> clz,int startLine){
		try {
			wb = WorkbookFactory.create(file);
			return readExcelTemplate2Obj(clz,startLine);
		} catch (EncryptedDocumentException e) {
			e.printStackTrace();
		} catch (InvalidFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	
	/**
	 * 
	 * @param clz
	 * @param startLine
	 * @return
	 */
	private List<T> readExcelTemplate2Obj(Class<T> clz, int startLine) {
		
		this.clz = clz;
		this.startLine = startLine;
		
		sheet = wb.getSheetAt(0);
		
		// 验证格式
		validateExcel();
		
		// 读取数据
		readExcelTemplate2Obj();
		
		return objs;
	}


	private void readExcelTemplate2Obj() {
		
		int lastRowNum = sheet.getLastRowNum();
		Row row = null;
		for(int i= (startLine -1); i<= lastRowNum;i++)
		{
			row = sheet.getRow(i);
			
			int firstCellNum = row.getFirstCellNum();
			int lastCellNum = row.getLastCellNum();
			int index = 0;
			T obj;
			try {
				obj = clz.newInstance();
				for(int j=firstCellNum;j<lastCellNum;j++)
				{
					Cell cell = row.getCell(j);
					String cellValue = getCellValue(cell);
					// 如果是空行就返回
					if(StringUtils.isEmpty(cellValue) && j == firstCellNum)
					{
						return;
					}
					ExcelHeader eh = ehs.get(index++);
					String fieldName = eh.getFieldName();
					Field field = clz.getDeclaredField(fieldName);
					field.setAccessible(true);
					field.set(obj, cellValue);
				}
				// 加入集合
				objs.add(obj);
			} catch (InstantiationException e1) {
				e1.printStackTrace();
			} catch (IllegalAccessException e1) {
				e1.printStackTrace();
			} catch (NoSuchFieldException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			}
		}
		
		
	}


	/**
	 * 验证excel的标题是否与模板要求一致
	 */
	private void validateExcel() {
		
		getTemplateClassFieldList();
		
		// 获取 Excel 的标题数据,由于excel的行下标是从0开始，输入的地方是内容的行号，故取标题这里-2
		Row row = sheet.getRow(startLine-2);
		int firstCellNum = row.getFirstCellNum();
		int lastCellNum = row.getLastCellNum();
		
		if(( lastCellNum - firstCellNum ) != ehs.size() )
		{
			throw new RuntimeException("excel标题列与模板类的属性个数不匹配,excel列数是:"+( lastCellNum - firstCellNum )+"模板类的属性个数是:"+ehs.size());
		}
		
		int index = 0;
		for(int i=firstCellNum; i< lastCellNum; i++)
		{
			Cell cell = row.getCell(i);
			String cellValue = getCellValue(cell);
			ExcelHeader eh = ehs.get(index++);
			if(!cellValue.equals(eh.getTitle()))
			{
				throw new RuntimeException("excel与模板类的属性注解的name不匹配,excel是:"+cellValue+",模板类里面的是:"+eh.getTitle());
			}
		}
		
	}

	/**
	 * 获取模板有 ExcelColumn 注解的属性
	 * @return
	 */
	private List<ExcelHeader> getTemplateClassFieldList() {
		Field[] fields = clz.getDeclaredFields();
		for(Field field : fields)
		{
			ExcelColumn excelColumn = field.getAnnotation(ExcelColumn.class);
			if(null == excelColumn)
			{
				continue;
			}
			
			// 
			String title = excelColumn.name();
			int order = excelColumn.order();
			String fieldName = field.getName();
			ehs.add(new ExcelHeader(title, order, fieldName));
		}
		
		if(ehs.isEmpty())
		{
			throw new RuntimeException("模板类没有注解 com.ExcelColumn .");
		}
		
		// 对 ExcelHeader 集合排序
		Collections.sort(ehs);
		
		return ehs;
	}
	
	
	/**
	 * 获取单元格的值
	 * 类型常量 == 具体的值对应关系
	 * CELL_TYPE_NUMERIC 数值型 0
	 * CELL_TYPE_STRING 字符串型 1
	 * CELL_TYPE_FORMULA 公式型 2
	 * CELL_TYPE_BLANK 空值 3
	 * CELL_TYPE_BOOLEAN 布尔型 4
	 * CELL_TYPE_ERROR 错误 5
	 * @param cell	单元格
	 * @return	单元格值
	 */
	private String getCellValue(Cell cell){
		String cellValue = "";
		
		if(null == cell)
		{
			return cellValue;
		}
		// 单元格类型
		int cellType = cell.getCellType();
		
		switch (cellType) {
			case Cell.CELL_TYPE_NUMERIC:
				DecimalFormat df = new DecimalFormat("0"); 
				cellValue =  df.format(cell.getNumericCellValue());
				break;
			case Cell.CELL_TYPE_STRING:
				cellValue =  cell.getStringCellValue();
				break;
			case Cell.CELL_TYPE_FORMULA:
				cellValue =  cell.getCellFormula();
				break;
			case Cell.CELL_TYPE_BOOLEAN:
				cellValue =  cell.getBooleanCellValue()+"";
				break;
			case Cell.CELL_TYPE_ERROR:
				cellValue =  cell.getErrorCellValue()+"";
				break;
			default:
				break;
		}
		return cellValue;
	}
	
}
