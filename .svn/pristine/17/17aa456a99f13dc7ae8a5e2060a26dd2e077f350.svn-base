package com.amwell.ecar.utils;

import java.security.MessageDigest;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.UUID;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import com.amwell.utils.HttpUtiils;

@SuppressWarnings({ "rawtypes" })
public class AuthSigHelper {

	private static final String HMAC_SHA1 = "HmacSHA1";

	public static void main(String[] args) {
		Map<String, String> params = new HashMap<String, String>();

		String appKey = "TEhBWTAwMDAxOTE2MTc=";
		String appSecret = "B7B1CFC8DA5418BF054485823F2090EA";
		Long timestamp = System.currentTimeMillis();

		String nonce = UUID.randomUUID().toString();
		String iccid = "898602B7101700082314";
		params.put("iccid", iccid);
		params.put("appKey", appKey);
		params.put("timestamp", timestamp + "");
		params.put("nonce", nonce);

		String sign = getSig(appKey, appSecret, timestamp, nonce, params);

		System.out.println(sign);
		System.out.println(sign.length());
		params.put("sign", sign);
		String result = HttpUtiils.post("http://eoc.e-car.cn:7070/service/pflow/simInfo/cardInfo", params, "utf-8");
		System.out.println("请求接口:http://eoc.e-car.cn:7070/service/pflow/simInfo/cardInfo");
		System.out.println("返回结果："+result);
		
		
		result = HttpUtiils.post("http://eoc.e-car.cn:7070/service/pflow/simInfo/queryDeviceStatus", params, "utf-8");
		System.out.println("请求接口:http://eoc.e-car.cn:7070/service/pflow/simInfo/queryDeviceStatus");
		System.out.println("返回结果："+result);
		
		result = HttpUtiils.post("http://eoc.e-car.cn:7070/service/pflow/simInfo/getGprsStatus", params, "utf-8");
		System.out.println("请求接口:http://eoc.e-car.cn:7070/service/pflow/simInfo/getGprsStatus");
		System.out.println("返回结果："+result);
		
		
	}

	public static boolean authSig(String appKey, String appSecret,
			Long timestamp, String nonce, Map<String, String> paramMap,
			String sig) {
		String getSig = getSig(appKey, appSecret, timestamp, nonce, paramMap);
		if (null == sig || null == getSig || !sig.equals(getSig)) {
			return false;
		}
		return true;

	}

	public static String getSig(String appKey, String appSecret,
			Long timestamp, String nonce, Map<String, String> paramMap) {

		SortedMap<String, Object> parameters = new TreeMap<String, Object>();
		parameters.putAll(paramMap);
		parameters.put("appKey", appKey);
		parameters.put("nonce", nonce);
		parameters.put("timestamp", timestamp);

		try {
			StringBuffer sb = new StringBuffer();
			Set es = parameters.entrySet();
			Iterator it = es.iterator();
			while (it.hasNext()) {
				Map.Entry entry = (Map.Entry) it.next();
				String k = (String) entry.getKey();
				Object v = entry.getValue();
				if (null != v && !"".equals(v)) {
					sb.append(k + "=" + v + "&");
				}
			}
			sb.deleteCharAt(sb.lastIndexOf("&"));

			// Base64编码
			String st64Encode = Base64Util.encode(sb.toString().getBytes(
					"UTF-8"));

			Mac mac = Mac.getInstance(HMAC_SHA1);
			String key = appKey + appSecret;
			SecretKeySpec secret = new SecretKeySpec(key.getBytes("UTF-8"),
					mac.getAlgorithm());
			mac.init(secret);
			byte[] origin = mac.doFinal(st64Encode.getBytes("UTF-8"));

			MessageDigest md = MessageDigest.getInstance("MD5");
			return byteArrayToHexString(md.digest(origin));

		} catch (Exception e) {

		}
		return null;

	}

	private static String byteArrayToHexString(byte b[]) {
		StringBuffer resultSb = new StringBuffer();
		for (int i = 0; i < b.length; i++)
			resultSb.append(byteToHexString(b[i]));

		return resultSb.toString();
	}

	private static String byteToHexString(byte b) {
		int n = b;
		if (n < 0)
			n += 256;
		int d1 = n / 16;
		int d2 = n % 16;
		return hexDigits[d1] + hexDigits[d2];
	}

	private static final String hexDigits[] = { "0", "1", "2", "3", "4", "5",
			"6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };
}
