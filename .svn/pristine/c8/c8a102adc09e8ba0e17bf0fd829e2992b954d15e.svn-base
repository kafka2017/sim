package com.amwell.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.apache.shiro.util.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.amwell.common.ErrorCodeEnum;
import com.amwell.mapper.UserMapper;
import com.amwell.mapper.UserRoleMapper;
import com.amwell.model.User;
import com.amwell.model.UserRole;
import com.amwell.service.UserService;
import com.amwell.util.PasswordHelper;
import com.amwell.util.ResultJson;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.util.StringUtil;

@Service("userService")
public class UserServiceImpl extends BaseService<User> implements UserService{
    @Resource
    private UserRoleMapper userRoleMapper;

	@Resource
	private UserMapper userMapper;
    
	@Override
    public PageInfo<User> selectByPage(User user, int start, int length) {
        Example example = new Example(User.class);
        Example.Criteria criteria = example.createCriteria();
        if (StringUtil.isNotEmpty(user.getUsername())) {
            criteria.andLike("username", "%" + user.getUsername() + "%");
        }
        if (user.getId() != null) {
            criteria.andEqualTo("id", user.getId());
        }
        
        if(user.getUsername() != null){
        	criteria.andLike("realName", "%"+user.getUsername()+"%");
        }
        
        if(user.getSimcompanyId() != null){
        	criteria.andEqualTo("simcompanyId",user.getSimcompanyId());
        }
        
        if (user.getEnable() != null) {
            criteria.andEqualTo("enable", user.getEnable());
        }
        //分页查询
        PageHelper.startPage(start, length);
        List<User> userList = selectByExample(example);
        return new PageInfo<>(userList);
    }

    @Override
    public User selectByUsername(String username) {
        Example example = new Example(User.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo("username",username);
        List<User> userList = selectByExample(example);
        if(userList.size()>0){
            return userList.get(0);
        }
            return null;
    }

    @Override
    @Transactional(propagation= Propagation.REQUIRED,readOnly=false,rollbackFor={Exception.class})
    public void delUser(Integer userid) {
        //删除用户表
        mapper.deleteByPrimaryKey(userid);
        //删除用户角色表
        Example example = new Example(UserRole.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo("userid",userid);
        userRoleMapper.deleteByExample(example);
    }


    private ResultJson<User> updateUserPassword(User queryUser,String oldPassword,String newPassword){
    	if(queryUser!=null&&queryUser.getId()!=null&&queryUser.getId().intValue()>0&&StringUtils.hasText(queryUser.getUsername())&&StringUtils.hasText(queryUser.getPassword())&&StringUtils.hasText(newPassword)){
    		//验证传入密码是否与原密码相同
			if(StringUtils.hasText(oldPassword)&&!queryUser.getPassword().equals(PasswordHelper.getEncryptPassword(queryUser.getUsername(), oldPassword))){
				return ResultJson.buildFailedMsg(ErrorCodeEnum.illegal_password.getErrorCode(), ErrorCodeEnum.illegal_password.getErrorMsg());
			}
			queryUser.setPassword(PasswordHelper.getEncryptPassword(queryUser.getUsername(), newPassword));
			userMapper.updateUserPassword(queryUser);
			return ResultJson.buildSuccessMsg(queryUser);
    	}
    	return ResultJson.buildFailedMsg(ErrorCodeEnum.illegal_para.getErrorCode(), ErrorCodeEnum.illegal_para.getErrorMsg());
    }
    
	@Override
	public ResultJson<User> updateUserPassword(Integer id, String oldPassword, String newPassword) {
		if(id!=null&&id.intValue()>0&&StringUtils.hasText(newPassword)){
			User queryUser = userMapper.selectByPrimaryKey(id);
			return this.updateUserPassword(queryUser, oldPassword, newPassword);
		}
		return ResultJson.buildFailedMsg(ErrorCodeEnum.illegal_para.getErrorCode(), ErrorCodeEnum.illegal_para.getErrorMsg());
	}

	@Override
	public ResultJson<User> updateUserPassword(String username, String oldPassword, String newPassword) {
		if(StringUtils.hasText(username)&&StringUtils.hasText(newPassword)){
			User queryUser = userMapper.selectByUsername(username);
			return this.updateUserPassword(queryUser, oldPassword, newPassword);
		}
		return ResultJson.buildFailedMsg(ErrorCodeEnum.illegal_para.getErrorCode(), ErrorCodeEnum.illegal_para.getErrorMsg());
	}
}
