package com.amwell.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.amwell.model.User;
import com.amwell.model.report.SimWaring;
import com.amwell.model.simcompany.SimCompanyQuery;
import com.amwell.model.simcompany.SimCompanyReport;
import com.amwell.model.simsendrecord.SimSendRecordCount;
import com.amwell.model.simsendrecord.SimSendRecordQuery;
import com.amwell.service.report.ReportService;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;


@Controller
public class HomeController {
	
	@Autowired
	private ReportService reportService;
	
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login() {
		return "login";
	}

	/**
	 * 登录
	 * @param request
	 * @param user
	 * @param model
	 * @return
	 */
	@ApiOperation(value="/login",notes="登录")
	@ApiImplicitParam(name = "user", value = "用户详细实体user", required = true, dataType = "User")
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(HttpServletRequest request,User user, Model model) {
		if (StringUtils.isEmpty(user.getUsername()) || StringUtils.isEmpty(user.getPassword())) {
			request.setAttribute("msg", "用户名或密码不能为空！");
			return "login";
		}
		Subject subject = SecurityUtils.getSubject();
		UsernamePasswordToken token = new UsernamePasswordToken(user.getUsername(), user.getPassword());
		try {
			subject.login(token);
			return "redirect:usersPage";
		} catch (LockedAccountException lae) {
			token.clear();
			request.setAttribute("msg", "用户已经被锁定不能登录，请与管理员联系！");
			return "login";
		} catch (AuthenticationException e) {
			token.clear();
			request.setAttribute("msg", "用户或密码不正确！");
			return "login";
		}
	}
	
	/**
	 * sim卡状态统计
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/simStatusReport")
	public List<SimCompanyReport> simStatusReport(SimCompanyQuery query){
		Session session = SecurityUtils.getSubject().getSession();
		User user = (User)session.getAttribute("userSession");
		if(user==null){
			return new ArrayList<SimCompanyReport>();
		}
		query.setUserid(user.getId());
		return reportService.simStatusReport(query);
	}
	
	/**
	 * sim卡流量阈值统计
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/simWaringReport")
	public List<SimWaring> simWaringReport(SimCompanyQuery query){
		Session session = SecurityUtils.getSubject().getSession();
		User user = (User)session.getAttribute("userSession");
		if(user==null){
			return new ArrayList<SimWaring>();
		}
		query.setUserid(user.getId());
		return reportService.simWaringReport(query);
	}
	
	/**
	 * 短信发送阈值统计
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "/simMessageRecord")
	public SimSendRecordCount simMessageRecord(SimSendRecordQuery query){
		Session session = SecurityUtils.getSubject().getSession();
		User user = (User)session.getAttribute("userSession");
		if(user==null){
			return new SimSendRecordCount();
		}
		query.setCompanyId(user.getSimcompanyId());
		return reportService.simMessageRecord(query);
	}
	

	@RequestMapping(value = { "/usersPage", "" })
	public String usersPage() {
		return "user/users";
	}

	@RequestMapping("/rolesPage")
	public String rolesPage() {
		return "role/roles";
	}

	@RequestMapping("/resourcesPage")
	public String resourcesPage() {
		return "resources/resources";
	}

	@RequestMapping("/403")
	public String forbidden() {
		return "403";
	}
}
