package com.amwell.job;

import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.amwell.ecar.service.ECarInterfaceService;
import com.amwell.ecar.vo.result.ECarDeviceStatusWrapperResult;
import com.amwell.ecar.vo.result.ECarGprsStatusWrapperResult;
import com.amwell.ecar.vo.result.ECarSIMListResult;
import com.amwell.ecar.vo.result.ECarSIMListWrapperResult;
import com.amwell.ecar.vo.result.ECarSimBaseInfo;
import com.amwell.ecar.vo.result.ECarSimWrapperResult;
import com.amwell.model.simbaseInfo.SimBaseInfo;
import com.amwell.model.simbaseInfo.SimBaseInfoQuery;
import com.amwell.service.simbaseInfo.SimBaseInfoService;
import com.amwell.util.DateHelper;
import com.amwell.util.JSONHelper;


/**
 * 从翼卡数据接口拉取SIM卡状态
 * @author hxj
 */
@Component
public class PullSIMStatusJob {

	private static final int CURR_PAGE=1;
	
	private static final int PAGE_SIZE=3000;
	
	@Autowired
	private ECarInterfaceService eCarInterfaceService;
	
	@Autowired
	private SimBaseInfoService simBaseInfoService;
	
	/**
	 * 6点-23点，每隔30分钟执行一次数据扫描
	 */
	@Scheduled(cron="0 0/30 6-23 * * ?")
	public void pullSimStatus(){
		System.out.println(Thread.currentThread().getId()+" pullSimStatus execute at:"+DateHelper.getNowDateTimeStr());
		try {
			//查询过去32分钟内的数据
			ECarSIMListWrapperResult  result = eCarInterfaceService.batchQuerySimBaseInfo(null,null, DateHelper.getPassedMinute(-32), DateHelper.getNowDateTimeStr(), CURR_PAGE, PAGE_SIZE);
			handleData(result);
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getId()+" pullSimStatus execute finished:"+DateHelper.getNowDateTimeStr());
	
	}

	/**
	 * 凌晨2点执行一次数据扫描，补全前一天的数据
	 */
	@Scheduled(cron="0 0 2 * * ?")
	public void repairData(){
		System.out.println(Thread.currentThread().getId()+" repairData execute at:"+DateHelper.getNowDateTimeStr());
		try {
			String yesterday = DateHelper.getYesterDateStr();
			String startDate = yesterday+" 00:00:00";
			ECarSIMListWrapperResult  result = eCarInterfaceService.batchQuerySimBaseInfo(null,null,startDate, DateHelper.getNowDateTimeStr(), CURR_PAGE, Integer.MAX_VALUE);
			handleData(result);
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getId()+" repairData execute finished:"+DateHelper.getNowDateTimeStr());
	}
	
	private void handleData(ECarSIMListWrapperResult result) {
		System.out.println(JSONHelper.toString(result));
		if(result!=null&&result.getSuccess().equals("true")&&result.getClass()!=null){
			ECarSIMListResult simListResult = result.getData();
			Long totalCount = simListResult.getTotalCount();
			System.out.println("totalCount="+totalCount);
			List<ECarSimBaseInfo> simList = simListResult.getList();
			String iccid = null;
			ECarGprsStatusWrapperResult gprsStatusResult =null;
			ECarDeviceStatusWrapperResult deviceStatusResult =null;
			ECarSimWrapperResult simResult =null;
			String gprsStatus =null;
			String deviceStatus=null;
			String cardState=null;
			String usedFlow =null;
			for(ECarSimBaseInfo simInfo : simList){
				iccid = simInfo.getIccid();
				if(StringUtils.hasText(iccid)){
					gprsStatusResult = eCarInterfaceService.getGprsStatusInfo(iccid);
					deviceStatusResult = eCarInterfaceService.getDeviceStatusInfo(iccid);
					simResult = eCarInterfaceService.getSimBaseInfo(iccid);
					if(gprsStatusResult!=null&&gprsStatusResult.getSuccess().equals("true")){
						gprsStatus = gprsStatusResult.getData().getGprsStatus();
					}
					if(deviceStatusResult!=null&&deviceStatusResult.getSuccess().equals("true")){
						deviceStatus = deviceStatusResult.getData().getDeviceStatus();
					}
					if(simResult!=null&&simResult.getSuccess().equals("true")){
						cardState = simResult.getData().getCardState();
						usedFlow = simResult.getData().getUsedFlow();
					}
					if(StringUtils.hasText(gprsStatus)||StringUtils.hasText(deviceStatus)&&StringUtils.hasText(cardState)||StringUtils.hasText(usedFlow)){
						SimBaseInfoQuery query = new SimBaseInfoQuery();
						query.setIccid(iccid);
						query.setPageNum(1);
						query.setPageSize(1);
						List<SimBaseInfo> list = simBaseInfoService.querySimBaseInfo(query);
						SimBaseInfo querySim = null;
						if(CollectionUtils.isNotEmpty(list)){
							querySim = list.get(0);
							querySim.setCardState(cardState);
							querySim.setDeviceStatus(deviceStatus);
							querySim.setGprsStatus(gprsStatus);
							if(StringUtils.hasText(usedFlow)){
								querySim.setUsedFlow(Double.valueOf(usedFlow));
							}
							simBaseInfoService.updSimBaseInfo(querySim);
						}
					}
				}
				
			}
		}		
	}
}
